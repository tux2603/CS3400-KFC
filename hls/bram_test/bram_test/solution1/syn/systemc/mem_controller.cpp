// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mem_controller.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mem_controller::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mem_controller::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> mem_controller::ap_ST_fsm_state1 = "1";
const sc_lv<2> mem_controller::ap_ST_fsm_state2 = "10";
const int mem_controller::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> mem_controller::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mem_controller::ap_const_lv32_1 = "1";
const sc_lv<1> mem_controller::ap_const_lv1_1 = "1";
const sc_lv<4> mem_controller::ap_const_lv4_0 = "0000";
const sc_lv<4> mem_controller::ap_const_lv4_F = "1111";
const sc_lv<1> mem_controller::ap_const_lv1_0 = "0";
const sc_lv<32> mem_controller::ap_const_lv32_2 = "10";
const sc_lv<8> mem_controller::ap_const_lv8_0 = "00000000";
const bool mem_controller::ap_const_boolean_1 = true;

mem_controller::mem_controller(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mem_controller_AXILiteS_s_axi_U = new mem_controller_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("mem_controller_AXILiteS_s_axi_U");
    mem_controller_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    mem_controller_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    mem_controller_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    mem_controller_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    mem_controller_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    mem_controller_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    mem_controller_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    mem_controller_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    mem_controller_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    mem_controller_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    mem_controller_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    mem_controller_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    mem_controller_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    mem_controller_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    mem_controller_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    mem_controller_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    mem_controller_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    mem_controller_AXILiteS_s_axi_U->ACLK(ap_clk);
    mem_controller_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    mem_controller_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    mem_controller_AXILiteS_s_axi_U->addr(addr);
    mem_controller_AXILiteS_s_axi_U->rw(rw);
    mem_controller_AXILiteS_s_axi_U->data_in(data_in);
    mem_controller_AXILiteS_s_axi_U->data_out(mem_Dout_A);
    mem_controller_AXILiteS_s_axi_U->data_out_ap_vld(data_out_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_data_out_ap_vld);
    sensitive << ( icmp_ln9_reg_91 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_icmp_ln9_fu_80_p2);
    sensitive << ( rw );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_Addr_A);
    sensitive << ( mem_Addr_A_orig );

    SC_METHOD(thread_mem_Addr_A_orig);
    sensitive << ( icmp_ln9_fu_80_p2 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln14_fu_86_p1 );

    SC_METHOD(thread_mem_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_mem_Din_A);
    sensitive << ( data_in );
    sensitive << ( icmp_ln9_fu_80_p2 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_EN_A);
    sensitive << ( icmp_ln9_fu_80_p2 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_Rst_A);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_mem_WEN_A);
    sensitive << ( icmp_ln9_fu_80_p2 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_sext_ln14_fu_86_p1);
    sensitive << ( addr );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mem_controller_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, mem_Addr_A, "(port)mem_Addr_A");
    sc_trace(mVcdFile, mem_EN_A, "(port)mem_EN_A");
    sc_trace(mVcdFile, mem_WEN_A, "(port)mem_WEN_A");
    sc_trace(mVcdFile, mem_Din_A, "(port)mem_Din_A");
    sc_trace(mVcdFile, mem_Dout_A, "(port)mem_Dout_A");
    sc_trace(mVcdFile, mem_Clk_A, "(port)mem_Clk_A");
    sc_trace(mVcdFile, mem_Rst_A, "(port)mem_Rst_A");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, addr, "addr");
    sc_trace(mVcdFile, rw, "rw");
    sc_trace(mVcdFile, data_in, "data_in");
    sc_trace(mVcdFile, data_out_ap_vld, "data_out_ap_vld");
    sc_trace(mVcdFile, icmp_ln9_fu_80_p2, "icmp_ln9_fu_80_p2");
    sc_trace(mVcdFile, icmp_ln9_reg_91, "icmp_ln9_reg_91");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sext_ln14_fu_86_p1, "sext_ln14_fu_86_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, mem_Addr_A_orig, "mem_Addr_A_orig");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mem_controller.hdltvin.dat");
    mHdltvoutHandle.open("mem_controller.hdltvout.dat");
}

mem_controller::~mem_controller() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mem_controller_AXILiteS_s_axi_U;
}

void mem_controller::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mem_controller::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        icmp_ln9_reg_91 = icmp_ln9_fu_80_p2.read();
    }
}

void mem_controller::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mem_controller::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mem_controller::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mem_controller::thread_data_out_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_reg_91.read(), ap_const_lv1_1))) {
        data_out_ap_vld = ap_const_logic_1;
    } else {
        data_out_ap_vld = ap_const_logic_0;
    }
}

void mem_controller::thread_icmp_ln9_fu_80_p2() {
    icmp_ln9_fu_80_p2 = (!rw.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(rw.read() == ap_const_lv8_0);
}

void mem_controller::thread_mem_Addr_A() {
    mem_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): mem_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void mem_controller::thread_mem_Addr_A_orig() {
    mem_Addr_A_orig =  (sc_lv<32>) (sext_ln14_fu_86_p1.read());
}

void mem_controller::thread_mem_Clk_A() {
    mem_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void mem_controller::thread_mem_Din_A() {
    mem_Din_A = data_in.read();
}

void mem_controller::thread_mem_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(icmp_ln9_fu_80_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(icmp_ln9_fu_80_p2.read(), ap_const_lv1_1)))) {
        mem_EN_A = ap_const_logic_1;
    } else {
        mem_EN_A = ap_const_logic_0;
    }
}

void mem_controller::thread_mem_Rst_A() {
    mem_Rst_A =  (sc_logic) (~ap_rst_n.read());
}

void mem_controller::thread_mem_WEN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_80_p2.read(), ap_const_lv1_0))) {
        mem_WEN_A = ap_const_lv4_F;
    } else {
        mem_WEN_A = ap_const_lv4_0;
    }
}

void mem_controller::thread_sext_ln14_fu_86_p1() {
    sext_ln14_fu_86_p1 = esl_sext<64,8>(addr.read());
}

void mem_controller::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void mem_controller::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"mem_Addr_A\" :  \"" << mem_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_EN_A\" :  \"" << mem_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_WEN_A\" :  \"" << mem_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Din_A\" :  \"" << mem_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_Dout_A\" :  \"" << mem_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Clk_A\" :  \"" << mem_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Rst_A\" :  \"" << mem_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

